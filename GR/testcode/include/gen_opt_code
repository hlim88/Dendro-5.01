#!/usr/bin/perl


#####################################################################
#
#
#   @d   - list of geometric vars that need 1st derivs for RHS
#   @dd  - list of geometric vars that need 2nd derivs for RHS
#   @ad  - list of geometric vars that need advective derivs for RHS
#   @con_d -
#   @con_dd -
#   @mad_d
#   @funcs - combined list of all derivatives for functions in @d and @dd
#
#
#####################################################################

# first derivs required for RHS

# Note: gbx, gby, gbz are not needed for the RHS, but the derivatives
# are needed for the boundary conditions.  The allocation of derivatives
# and calls to derivative routines for the boundaries uses the functions
# required for the rhs, so I include them here.
@d = (alpha, beta0, beta1, beta2,
      B0, B1, B2,
      chi, Gt0, Gt1, Gt2, K,
      gt0, gt1, gt2, gt3, gt4, gt5,
      At0, At1, At2, At3, At4, At5 );

# second derivs required for RHS
@dd = (gt0, gt1, gt2, gt3, gt4, gt5, chi,
       alpha, beta0, beta1, beta2 );

# advective derivatives
@ad = (gt0, gt1, gt2, gt3, gt4, gt5,
       At0, At1, At2, At3, At4, At5,
       alpha, beta0, beta1, beta2, chi, Gt0, Gt1, Gt2, K,
       B0, B1, B2 );

@pd = ("dx_", "dy_", "dz_");
@pad = ("adx_", "ady_", "adz_");
@pdd = ("dxx_", "dxy_", "dxz_", "dyy_", "dyz_", "dzz_");

# RHS derivatives...................................................
@funcs = ();

foreach $f (@d) {
  foreach $p (@pd) {
    $n = $p . $f;
    # printf "name: $n\n";
    push(@funcs, $n);
  }
}

foreach $f (@dd) {
  foreach $p (@pdd) {
    $n = $p . $f;
    # printf "name: $n\n";
    push(@funcs, $n);
  }
}

# advective derivatives...................................................
@afuncs=();
foreach $f (@ad) {
  foreach $p (@pad) {
    $n = $p . $f;
    # printf "name: $n\n";
    push(@afuncs, $n);
  }
}

# advective derivatives 2....here we handle advective derivs with centered
# ...........................operators....................................
@afuncs2=();
foreach $f (@ad) {
  foreach $p (@pd) {
    $n = $p . $f;
    # printf "name: $n\n";
    push(@afuncs2, $n);
  }
}


###########################################################################
#
#  Write declarations for the main RHS file
#
###########################################################################

###########################################################################
#
#  Allocate memory (1)
#
###########################################################################
$ofile = "opt_memalloc.h";
open(OFILE, ">$ofile");

$i=0;
while($i<=$#funcs) {
  $j = 0;
  print OFILE "  double ";
  while($j < 4 && $i <= $#funcs) {
    print OFILE "*" . $funcs[$i];
    if ($j < 3 && $i < $#funcs) {
      print OFILE ", ";
    }
    $j++;
    $i++;
  }
  print OFILE ";\n";
}

foreach $f (@funcs) {
  print OFILE "  posix_memalign((void **)&" . $f . ", align, (n+AVX_SIMD_LENGTH) * sizeof(double));\n";
}

foreach $f (@funcs) {
  print OFILE "  " . $f . " += 2;\n";
}

close(OFILE);

###########################################################################
#
#  Calls for derivatives (1)
#
###########################################################################
$ofile = "opt_derivs.h";
open(OFILE, ">$ofile");

foreach $e (@d) {
  $dxn = "dx_" . $e;
  $dxxn = "dxx_" . $e;
  if ($e ~~ @dd) {
    print OFILE "  std::cout << \"calling avx_apply_stencil_ddx " . $e . "\"; \n";
    print OFILE "  avx_apply_stencil_d_ddx(" . $e . "_3D, " . $dxn . ", " . $dxxn . ", sz, h);\n";
    print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dxn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
    print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dxxn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
  }
  else {
    print OFILE "  std::cout << \"calling avx_apply_stencil_x " . $e . "\"; \n";
    print OFILE "  avx_apply_stencil_x(" . $e . "_3D, " . $dxn . ", sz, h);\n";
#    print OFILE "  if (std::any_of(std::begin($dxn), std::end($dxn), std::isnan)) std::cout << \"NaN test failed\" << std::endl;";
    print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dxn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
  }
}

foreach $e (@d) {
  $dyn = "dy_" . $e;
  $dyyn = "dyy_" . $e;
  if ($e ~~ @dd) {
    print OFILE "  std::cout << \"calling avx_apply_stencil_ddy " . $e . "\"; \n";
    print OFILE "  avx_apply_stencil_d_ddy(" . $e . "_3D, " . $dyn . ", " . $dyyn . ", sz, h);\n";
    print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dyn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
    print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dyyn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
  }
  else {
    print OFILE "  std::cout << \"calling avx_apply_stencil_y " . $e . "\"; \n";
    print OFILE "  avx_apply_stencil_y(" . $e . "_3D, " . $dyn . ", sz, h);\n";
    print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dyn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
  }
}

foreach $e (@d) {
  $dzn = "dz_" . $e;
  $dzzn = "dzz_" . $e;
  if ($e ~~ @dd) {
    print OFILE "  std::cout << \"calling avx_apply_stencil_ddz " . $e . "\"; \n";
    print OFILE "  avx_apply_stencil_d_ddz(" . $e . "_3D, " . $dzn . ", " . $dzzn . ", sz, h);\n";
    print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dzn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
    print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dzzn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
  }
  else {
    print OFILE "  std::cout << \"calling avx_apply_stencil_z " . $e . "\"; \n";
    print OFILE "  avx_apply_stencil_z(" . $e . "_3D, " . $dzn . ", sz, h);\n";
    print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dzn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
  }
}

### Calls for mixed 2nd derivatives
foreach $e (@dd) {
  $dxn  = "dx_" . $e;
  $dyn  = "dy_" . $e;
  $dzn  = "dz_" . $e;
  $dxyn = "dxy_" . $e;
  $dxzn = "dxz_" . $e;
  $dyzn = "dyz_" . $e;

  print OFILE "  std::cout << \"...calling mixed second: $dxyn\" << endl;\n";
  print OFILE "  avx_apply_stencil_y(" . $dxn . ", " . $dxyn . ", sz, h);\n";
  print OFILE "  std::cout << \"...calling mixed second: $dxzn\" << endl;\n";
  print OFILE "  avx_apply_stencil_z(" . $dxn . ", " . $dxzn . ", sz, h);\n";
  print OFILE "  std::cout << \"...calling mixed second: $dyzn\" << endl;\n";
  print OFILE "  avx_apply_stencil_z(" . $dyn . ", " . $dyzn . ", sz, h);\n";
}

close(OFILE);

###########################################################################
#
# set derivatives
#
###########################################################################
$ofile = "opt_set_derivs.h";
open(OFILE, ">$ofile");

foreach $e (@d) {
  for ($i = 0; $i < 3; $i++) {
    $darray = $pd[$i] . $e;
    $dpt = "d" . $i . "_" . $e;
    print OFILE "  double " . $dpt . " = " . $darray . "[pp];\n";
  }
}

#Q
@pddn = ("d00_", "d01_", "d02_", "d11_", "d12_", "d22_");
foreach $e (@dd) {
  for ($i = 0; $i < 6; $i++) {
    $darray = $pdd[$i] . $e;
    $dpt = $pddn[$i] . $e;
    print OFILE "  double " . $dpt . " = " . $darray . "[pp];\n";
  }
}

foreach $e (@ad) {
  for ($i = 0; $i < 3; $i++) {
    $darray = $pad[$i] . $e;
    $dpt = "ad" . $i . "_" . $e;
    print OFILE "  double " . $dpt . " = " . $darray . "[pp];\n";
  }
}


close(OFILE);

###########################################################################
#
# Deallocate memory
#
###########################################################################
$ofile = "opt_dealloc.h";
open(OFILE, ">$ofile");

# geometric vars
foreach $f (@funcs) {
  print OFILE "  " . $f . " -= 2;\n";
}

foreach $f (@funcs) {
  print OFILE "  free(" . $f . ");\n";
}

close(OFILE);

###########################################################################
#
# Now do the same for advective derivatives
#
###########################################################################

###########################################################################
#
#  Allocate memory for advective derivs
#
###########################################################################
$ofile = "opt_memalloc_adv.h";
open(OFILE, ">$ofile");

$i=0;
while($i<=$#afuncs) {
  $j = 0;
  print OFILE "  double ";
  while($j < 4 && $i <= $#afuncs) {
    print OFILE "*" . $afuncs[$i];
    if ($j < 3 && $i < $#afuncs) {
      print OFILE ", ";
    }
    $j++;
    $i++;
  }
  print OFILE ";\n";
}

foreach $f (@afuncs) {
  print OFILE "  posix_memalign((void **)&" . $f . ", align, (n+AVX_SIMD_LENGTH) * sizeof(double));\n";
}

foreach $f (@afuncs) {
  print OFILE "  " . $f . " += 2;\n";
}

close(OFILE);

###########################################################################
#
#  Calls for derivatives (1)
#
###########################################################################
$ofile = "opt_derivs_adv.h";
open(OFILE, ">$ofile");

foreach $e (@ad) {
  $dxn = "dx_" . $e;
  print OFILE "  std::cout << \"calling avx_apply_adv_stencil_x " . $e . "\"; \n";
  print OFILE "  avx_apply_adv_stencil_x(" . $e . "_3D, " . $dxn . ", beta0_3D, sz, h);\n";
  print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dxn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
}

# QQ
 foreach $e (@ad) {
  $dyn = "dy_" . $e;
  print OFILE "  std::cout << \"calling avx_apply_adv_stencil_y " . $e . "\"; \n";
  print OFILE "  avx_apply_adv_stencil_y(" . $e . "_3D, " . $dyn . ", beta1_3D, sz, h);\n";
  print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dyn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
}

foreach $e (@ad) {
  $dzn = "dz_" . $e;
  print OFILE "  std::cout << \"calling avx_apply_adv_stencil_z " . $e . "\"; \n";
  print OFILE "  avx_apply_adv_stencil_z(" . $e . "_3D, " . $dzn . ", beta2_3D, sz, h);\n";
  print OFILE "{ bool isn=false;\n for (int iii=0; iii<n; ++iii) \n\tisn |= std::isnan(" . $dzn . "[iii]);\n std::cout << \"  isNAN: \" << isn << std::endl;}\n";
}

close(OFILE);

###########################################################################
#
# Deallocate memory for advective derivs
#
###########################################################################
$ofile = "opt_dealloc_adv.h";
open(OFILE, ">$ofile");

# geometric vars
foreach $f (@afuncs) {
  print OFILE "  " . $f . " -= 2;\n";
}

foreach $f (@afuncs) {
  print OFILE "  free(" . $f . ");\n";
}
close(OFILE);
