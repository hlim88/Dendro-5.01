#!/usr/bin/perl


#####################################################################
#
#
#   @d   - list of geometric vars that need 1st derivs for RHS
#   @dd  - list of geometric vars that need 2nd derivs for RHS
#   @ad  - list of geometric vars that need advective derivs for RHS
#   @con_d -
#   @con_dd -
#   @mad_d
#   @funcs - combined list of all derivatives for functions in @d and @dd
#
#
#####################################################################

# first derivs required for RHS

# Note: gbx, gby, gbz are not needed for the RHS, but the derivatives
# are needed for the boundary conditions.  The allocation of derivatives
# and calls to derivative routines for the boundaries uses the functions
# required for the rhs, so I include them here.
@d = (alpha, beta0, beta1, beta2,
      B0, B1, B2,
      chi, Gt0, Gt1, Gt2, K,
      gt0, gt1, gt2, gt3, gt4, gt5,
      At0, At1, At2, At3, At4, At5 );

# second derivs required for RHS
@dd = (gt0, gt1, gt2, gt3, gt4, gt5, chi,
       alpha, beta0, beta1, beta2 );

# advective derivatives
@ad = (gt0, gt1, gt2, gt3, gt4, gt5,
       At0, At1, At2, At3, At4, At5,
       alpha, beta0, beta1, beta2, chi, Gt0, Gt1, Gt2, K,
       B0, B1, B2 );

@pd = ("grad_0_", "grad_1_", "grad_2_");
@pad = ("agrad_0_", "agrad_1_", "agrad_2_");
@pkod = ("kograd_0_", "kograd_1_", "kograd_2_");
@pdd = ("grad2_0_0_", "grad2_0_1_", "grad2_0_2_", "grad2_1_1_", "grad2_1_2_", "grad2_2_2_");

# RHS derivatives...................................................
@funcs = ();

foreach $f (@d) {
  foreach $p (@pd) {
    $n = $p . $f;
    # printf "name: $n\n";
    push(@funcs, $n);
  }
}

foreach $f (@dd) {
  foreach $p (@pdd) {
    $n = $p . $f;
    # printf "name: $n\n";
    push(@funcs, $n);
  }
}

#foreach $f (@d) {
#  foreach $p (@pkod) {
#    $n = $p . $f;
#    # printf "name: $n\n";
#    push(@funcs, $n);
#  }
#}

# advective derivatives...................................................
@afuncs=();
foreach $f (@ad) {
  foreach $p (@pad) {
    $n = $p . $f;
    # printf "name: $n\n";
    push(@afuncs, $n);
  }
}

# advective derivatives 2....here we handle advective derivs with centered
# ...........................operators....................................
@afuncs2=();
foreach $f (@ad) {
  foreach $p (@pd) {
    $n = $p . $f;
    # printf "name: $n\n";
    push(@afuncs2, $n);
  }
}


###########################################################################
#
#  Write declarations for the main RHS file
#
###########################################################################

###########################################################################
#
#  Allocate memory (1)
#
###########################################################################
$ofile = "vec_memalloc.h";
open(OFILE, ">$ofile");

  print OFILE "  const int bytes = n * sizeof(double);\n";

foreach $f (@funcs) {
  #print OFILE "  posix_memalign((void **)&" . $f . ", align, (n+AVX_SIMD_LENGTH) * sizeof(double));\n";
  print OFILE "  double *" . $f . " = (double *) malloc(bytes);\n";
}

close(OFILE);

###########################################################################
#
#  Calls for derivatives (1)
#
###########################################################################
$ofile = "vec_derivs.h";
open(OFILE, ">$ofile");

foreach $e (@d) {
  $dxn = "grad_0_" . $e;
  $dxxn = "grad2_0_0_" . $e;
  if ($e ~~ @dd) {
    print OFILE "  deriv_x(" . $dxn . ", " . $e . ", h, nx, ny, nz);\n";
    print OFILE "  deriv_xx(" . $dxxn . ", " . $e . ", h, nx, ny, nz);\n";
  }
  else {
    print OFILE "  deriv_x(" . $dxn . ", " . $e . ", h, nx, ny, nz);\n";
  }
}

foreach $e (@d) {
  $dyn = "grad_1_" . $e;
  $dyyn = "grad2_1_1_" . $e;
  if ($e ~~ @dd) {
    print OFILE "  deriv_y(" . $dyn . ", " . $e . ", h, nx, ny, nz);\n";
    print OFILE "  deriv_yy(" . $dyyn . ", " . $e . ", h, nx, ny, nz);\n";
  }
  else {
    print OFILE "  deriv_y(" . $dyn . ", " . $e . ", h, nx, ny, nz);\n";
  }
}

foreach $e (@d) {
  $dzn = "grad_2_" . $e;
  $dzzn = "grad2_2_2_" . $e;
  if ($e ~~ @dd) {
    print OFILE "  deriv_z(" . $dzn . ", " . $e . ", h, nx, ny, nz);\n";
    print OFILE "  deriv_zz(" . $dzzn . ", " . $e . ", h, nx, ny, nz);\n";
  }
  else {
    print OFILE "  deriv_z(" . $dzn . ", " . $e . ", h, nx, ny, nz);\n";
  }
}

### Calls for mixed 2nd derivatives
foreach $e (@dd) {
  $dxn  = "grad_0_" . $e;
  $dyn  = "grad_1_" . $e;
  $dxyn = "grad2_0_1_" . $e;
  $dxzn = "grad2_0_2_" . $e;
  $dyzn = "grad2_1_2_" . $e;

  print OFILE "  deriv_y(" . $dxyn . ", " . $dxn . ", h, nx, ny, nz);\n";
  print OFILE "  deriv_z(" . $dxzn . ", " . $dxn . ", h, nx, ny, nz);\n";
  print OFILE "  deriv_z(" . $dyzn . ", " . $dyn . ", h, nx, ny, nz);\n";
}


### Calls for KO dissipation
#foreach $e (@kod) {
#  $dxn  = "kograd_0_" . $e;
#  $dyn  = "kograd_1_" . $e;
#  $dzn  = "kograd_2_" . $e;
#  print OFILE "  ko_deriv42_x(" . $dxn . ", " . $e . ", h, nx, ny, nz, mode);\n";
#  print OFILE "  ko_deriv42_y(" . $dyn . ", " . $e . ", h, nx, ny, nz, mode);\n";
#  print OFILE "  ko_deriv42_z(" . $dzn . ", " . $e . ", h, nx, ny, nz, mode);\n";
#
#}

close(OFILE);

###########################################################################
#
# Deallocate memory
#
###########################################################################
$ofile = "vec_dealloc.h";
open(OFILE, ">$ofile");

# geometric vars
foreach $f (@funcs) {
  print OFILE "  free(" . $f . ");\n";
}

close(OFILE);

###########################################################################
#
# Now do the same for advective derivatives
#
###########################################################################

###########################################################################
#
#  Allocate memory for advective derivs
#
###########################################################################
$ofile = "vec_memalloc_adv.h";
open(OFILE, ">$ofile");

foreach $f (@afuncs) {
  print OFILE "  double *" . $f . " = (double *) malloc(bytes);\n";
}

close(OFILE);

###########################################################################
#
#  Calls for derivatives (1)
#
###########################################################################
$ofile = "vec_derivs_adv.h";
open(OFILE, ">$ofile");

foreach $e (@ad) {
  $dxn = "agrad_0_" . $e;
  print OFILE "  adv_deriv_x(" . $dxn . ", " . $e . ", h, nx, ny, nz, beta0);\n";
}

# QQ
 foreach $e (@ad) {
  $dyn = "agrad_1_" . $e;
  print OFILE "  adv_deriv_y(" . $dyn . ", " . $e . ", h, nx, ny, nz, beta1);\n";
}

foreach $e (@ad) {
  $dzn = "agrad_2_" . $e;
  print OFILE "  adv_deriv_z(" . $dzn . ", " . $e . ", h, nx, ny, nz, beta2);\n";
}

close(OFILE);

###########################################################################
#
#  Calls for Kreiss-Oliger derivatives (1)
#
###########################################################################
$ofile = "vec_derivs_ko.h";
open(OFILE, ">$ofile");

foreach $e (@ad) {
  $dxn = "kograd_0_" . $e;
  print OFILE "  ko_deriv_x(" . $dxn . ", " . $e . ", h, nx, ny, nz, mode);\n";
}

# QQ
 foreach $e (@ad) {
  $dyn = "kograd_1_" . $e;
  print OFILE "  ko_deriv_y(" . $dyn . ", " . $e . ", h, nx, ny, nz, mode);\n";
}

foreach $e (@ad) {
  $dzn = "kograd_2_" . $e;
  print OFILE "  ko_deriv_z(" . $dyn . ", " . $e . ", h, nx, ny, nz, mode);\n";
}

close(OFILE);


###########################################################################
#
# Deallocate memory for advective derivs
#
###########################################################################
$ofile = "vec_dealloc_adv.h";
open(OFILE, ">$ofile");

foreach $f (@afuncs) {
  print OFILE "  free(" . $f . ");\n";
}
close(OFILE);
